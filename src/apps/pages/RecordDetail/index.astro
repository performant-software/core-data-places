---
import BackButton from "@components/BackButton";
import Container from "@components/Container.astro";
import { getNameView } from "@utils/people";
import MediaContents from "./MediaContents";
import PlaceMap from "./PlaceMap";
import Relations from "./Relations.astro";
import UserDefined from "./UserDefined.astro";

interface Props {
  coverUrl?: string;
  excludes: string[];
  geometry?: any;
  lang: string;
  name: string;
  record: any;
}

const { coverUrl, excludes, geometry, lang, name, record } = Astro.props;

const relations = {
  events: {},
  instances: {},
  items: {},
  manifests: record.relatedRecords?.manifests,
  mediaContents: {},
  organizations: {},
  people: {},
  places: {},
  taxonomies: {},
  works: {}
}

const INVERSE_SUFFIX = '_inverse';

// group relations by the UUID of the relationship
for (const modelType of Object.keys(record.relatedRecords)) {
  if (modelType === 'manifests') {
    continue
  }

  record.relatedRecords[modelType].forEach(rel => {
    if (excludes.includes(rel.project_model_relationship_uuid)) {
      return
    }

    const key = rel.project_model_relationship_inverse
      ? rel.project_model_relationship_uuid + INVERSE_SUFFIX
      : rel.project_model_relationship_uuid;

    const relationArray = relations[modelType][key];
    if (relationArray) {
      relationArray.push(rel);
    } else {
      relations[modelType][key] = [rel];
    }
  })
}
---

<Container className="py-6 w-full">
  <BackButton
    className='absolute top-[26px]'
    id='backButton'
  />
  <div class="ml-12 divide-y divide-solid divide-[#e5e5e5]">
    <h1 class="font-bold text-3xl text-neutral-800 mt-0 mb-6">{name}</h1>
    {(geometry || coverUrl) && (
      <div class='h-[360px] py-6 mx-auto flex gap-6 w-full'>
        {coverUrl && (
          <img
            class={`${geometry ? 'w-[30%]' : 'w-full'} h-full object-cover`}
            src={coverUrl}
          />
        )}
        {geometry && (
          <div class={coverUrl ? 'w-[70%]' : 'w-full'}>
            <PlaceMap client:only='react' lang={lang} geometry={geometry} />
          </div>
        )}
      </div>
    )}
    <slot />
    <UserDefined
      record={record}
    />
    {relations.manifests && (
      <MediaContents
        client:only='react'
        data={relations.manifests}
        lang={lang}
      />
    )}
    {Object.keys(relations.events).map((uuid) => (
      <Relations
        data={relations.events[uuid]}
        icon='date'
        model="events"
        resolveName={event => event.name}
        uuid={uuid}
      />
    ))}
    {Object.keys(relations.instances).map((uuid) => (
      <Relations
        data={relations.instances[uuid]}
        model="instances"
        resolveName={instance => instance.name}
        uuid={uuid}
      />
    ))}
    {Object.keys(relations.items).map((uuid) => (
      <Relations
        data={relations.items[uuid]}
        model="items"
        resolveName={item => item.name}
        uuid={uuid}
      />
    ))}
    {Object.keys(relations.organizations).map((uuid) => (
      <Relations
        data={relations.organizations[uuid]}
        icon="occupation"
        model="organizations"
        resolveName={organization => organization.name}
        uuid={uuid}
      />
    ))}
    {Object.keys(relations.people).map((uuid) => (
      <Relations
        data={relations.people[uuid]}
        icon="person"
        model="people"
        resolveName={person => getNameView(person)}
        uuid={uuid}
      />
    ))}
    {Object.keys(relations.places).map((uuid) => (
      <Relations
        data={relations.places[uuid]}
        icon="location"
        model="places"
        resolveName={place => place.name}
        uuid={uuid}
      />
    ))}
    {Object.keys(relations.taxonomies).map((uuid) => (
      <Relations
        data={relations.taxonomies[uuid]}
        model="taxonomies"
        resolveName={item => item.name}
        uuid={uuid}
      />
    ))}
    {Object.keys(relations.works).map((uuid) => (
      <Relations
        data={relations.works[uuid]}
        model="works"
        resolveName={work => work.name}
        uuid={uuid}
      />
    ))}
  </div>
</Container>

<script>
  const backButton = document.querySelector('#backButton')
  backButton.addEventListener('click', () => history.back())
</script>
